input {
    syslog {
        port => 5514
        add_field => { "[@metadata][key]" => "ipv4" }
    }

    syslog {
        port => 5515
        add_field => { "[@metadata][key]" => "ipv6" }
    }

}

filter {

     if [@metadata][key] == "ipv4" {

        grok {
                match => {
                        "message" => "%{SYSLOGTIMESTAMP:date} %{DATA:LogChain}: in:%{DATA:src_zone} out:%{DATA:dst_zone}, src-mac %{MAC}, proto %{DATA:proto}, %{IP:src_ip}:%{INT:src_port}->%{IP:dst_ip}:%{INT:dst_port}, NAT \(%{IP:nat_lan_src_ip}:%{INT:nat_lan_src_port}->%{IP:nat_wan_src_ip}:%{INT:nat_wan_src_port}\)->%{IP:nat_dst_ip}:%{INT:nat_dstport}, len %{INT:length}"
                }
        }

        mutate {
        remove_field => [
            "message", "dst_ip", "nat_dst_ip", "dst_zone", "src_ip", "nat_dstport", "length", "src_port", "host",
            "src_zone", "LogChain", "dst_port", "tags",
            "severity", "severity_label", "@version", "facility_label", "priority", "facility"
            ]
        }
    }

    if [@metadata][key] == "ipv6" {

        grok {
                match => {
                        "message" => "%{GREEDYDATA} %{GREEDYDATA} %{TIME:time} %{DATA:bras} %{GREEDYDATA:date} %{GREEDYDATA:cod_cliente} %{GREEDYDATA:ipv6_prefix}"
                }
        }

        mutate {
        remove_field => [
            "message", "time", "bras", "@version", "priority", "facility", "severity_label", "severity",
            "facility_label", "tags", "host"
            ]
        }

    }
}

output {

    if [@metadata][key] == "ipv4" {
        stdout { codec => rubydebug }
    }

    if [@metadata][key] == "ipv4" {

        file {
                gzip => true
                path => "/var/log/logstash/%{+YYYY}/%{+MM}/%{+dd}/log_cgnat_%{+YYYY-MM-dd}.gz"
                codec => json_lines { delimiter => ","}
        }
    }

    if [@metadata][key] == "ipv6" {

        file {
                gzip => true
                path => "/var/log/logstash/%{+YYYY}/%{+MM}/%{+dd}/log_ipv6_pd_%{+YYYY-MM-dd}.gz"
                codec => json_lines { delimiter => ","}
        }
    }

}
